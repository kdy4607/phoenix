-- 시퀀스 생성
CREATE SEQUENCE MOVIES_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- 테이블 생성
CREATE TABLE MOVIES
(
    MOVIE_ID    NUMBER PRIMARY KEY,
    MOVIE_TITLE VARCHAR2(255) NOT NULL UNIQUE
);

-- 트리거 생성 (INSERT 시 MOVIE_ID 자동 증가)
CREATE OR REPLACE TRIGGER MOVIES_TRG
    BEFORE INSERT
    ON MOVIES
    FOR EACH ROW
BEGIN
    SELECT MOVIES_SEQ.NEXTVAL INTO :NEW.MOVIE_ID FROM DUAL;
END;
/

-- 시퀀스 생성
CREATE SEQUENCE THEATERS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- 테이블 생성
CREATE TABLE THEATERS
(
    THEATER_ID   NUMBER PRIMARY KEY,
    THEATER_NAME VARCHAR2(255) NOT NULL UNIQUE
);

-- 트리거 생성 (INSERT 시 THEATER_ID 자동 증가)
CREATE OR REPLACE TRIGGER THEATERS_TRG
    BEFORE INSERT
    ON THEATERS
    FOR EACH ROW
BEGIN
    SELECT THEATERS_SEQ.NEXTVAL INTO :NEW.THEATER_ID FROM DUAL;
END;
/

-- 시퀀스 생성
CREATE SEQUENCE SCHEDULES_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- 테이블 생성
CREATE TABLE SCHEDULES
(
    SCHEDULE_ID      NUMBER PRIMARY KEY,
    MOVIE_ID         NUMBER      NOT NULL,
    THEATER_ID       NUMBER      NOT NULL,
    DATE_OF_SCHEDULE DATE        NOT NULL, -- 'DATE'는 예약어이므로 'DATE_OF_SCHEDULE'로 변경
    START_TIME       VARCHAR2(5) NOT NULL, -- HH:MM 형식 (예: '14:30')
    AVAILABLE_SEATS  NUMBER      NOT NULL,
    FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES (MOVIE_ID),
    FOREIGN KEY (THEATER_ID) REFERENCES THEATERS (THEATER_ID),
    UNIQUE (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME)
);

-- 트리거 생성 (INSERT 시 SCHEDULE_ID 자동 증가)
CREATE OR REPLACE TRIGGER SCHEDULES_TRG
    BEFORE INSERT
    ON SCHEDULES
    FOR EACH ROW
BEGIN
    SELECT SCHEDULES_SEQ.NEXTVAL INTO :NEW.SCHEDULE_ID FROM DUAL;
END;
/

-- 시퀀스 생성
CREATE SEQUENCE SEATS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- 테이블 생성
CREATE TABLE SEATS
(
    SEAT_ID     NUMBER PRIMARY KEY,
    THEATER_ID  NUMBER       NOT NULL,
    SEAT_NUMBER VARCHAR2(10) NOT NULL,
    FOREIGN KEY (THEATER_ID) REFERENCES THEATERS (THEATER_ID),
    UNIQUE (THEATER_ID, SEAT_NUMBER)
);

-- 트리거 생성 (INSERT 시 SEAT_ID 자동 증가)
CREATE OR REPLACE TRIGGER SEATS_TRG
    BEFORE INSERT
    ON SEATS
    FOR EACH ROW
BEGIN
    SELECT SEATS_SEQ.NEXTVAL INTO :NEW.SEAT_ID FROM DUAL;
END;
/
-- 시퀀스 생성
CREATE SEQUENCE RESERVATIONS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- 테이블 생성
CREATE TABLE RESERVATIONS
(
    RESERVATION_ID   NUMBER PRIMARY KEY,
    MOVIE_ID         NUMBER        NOT NULL,
    SCHEDULE_ID      NUMBER        NOT NULL,
    SEAT_ID          NUMBER        NOT NULL,
    RESERVATION_DATE DATE          NOT NULL,
    TOTAL_AMOUNT     NUMBER(10, 2) NOT NULL,
    RESERVATION_TIME TIMESTAMP DEFAULT SYSTIMESTAMP, -- Oracle의 타임스탬프
    FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES (MOVIE_ID),
    FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES (SCHEDULE_ID),
    FOREIGN KEY (SEAT_ID) REFERENCES SEATS (SEAT_ID),
    UNIQUE (SCHEDULE_ID, SEAT_ID)
);

-- 트리거 생성 (INSERT 시 RESERVATION_ID 자동 증가)
CREATE OR REPLACE TRIGGER RESERVATIONS_TRG
    BEFORE INSERT
    ON RESERVATIONS
    FOR EACH ROW
BEGIN
    SELECT RESERVATIONS_SEQ.NEXTVAL INTO :NEW.RESERVATION_ID FROM DUAL;
END;
/

CREATE TABLE RESERVED_SEATS
(
    RESERVED_SEAT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- 자동 증가하는 PK
    RESERVATION_ID   NUMBER NOT NULL,                                 -- 어느 예약에 속하는 좌석인지 (FK to RESERVATIONS)
    SCHEDULE_ID      NUMBER NOT NULL,                                 -- 어느 상영 스케줄에 속하는 좌석인지 (FK to SCHEDULES)
    SEAT_ID          NUMBER NOT NULL,                                 -- 어느 좌석인지 (FK to SEATS)
    -- 나중에 동시성 제어를 위해 LOCK_STATUS, LOCKED_BY_USER_ID, LOCK_TIME 등을 추가할 수 있습니다.
    -- 현재는 단순 예약으로 간주합니다.
    CONSTRAINT PK_RESERVED_SEATS PRIMARY KEY (RESERVED_SEAT_ID),
    CONSTRAINT FK_RES_SEATS_RESERVATION FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATIONS (RESERVATION_ID),
    CONSTRAINT FK_RES_SEATS_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES (SCHEDULE_ID),
    CONSTRAINT FK_RES_SEATS_SEAT FOREIGN KEY (SEAT_ID) REFERENCES SEATS (SEAT_ID)
);

INSERT INTO MOVIES (MOVIE_TITLE)
VALUES ('범죄도시4');
INSERT INTO MOVIES (MOVIE_TITLE)
VALUES ('인사이드 아웃 2');
INSERT INTO MOVIES (MOVIE_TITLE)
VALUES ('퓨리오사: 매드맥스 사가');
INSERT INTO MOVIES (MOVIE_TITLE)
VALUES ('탑건: 매버릭');
COMMIT;

UPDATE MOVIES
SET MOVIE_TITLE = '퓨리오사 매드맥스 사가'
WHERE MOVIE_TITLE = '퓨리오사: 매드맥스 사가';

select *
from MOVIES;

INSERT INTO THEATERS (THEATER_NAME)
VALUES ('1관');
INSERT INTO THEATERS (THEATER_NAME)
VALUES ('2관');
INSERT INTO THEATERS (THEATER_NAME)
VALUES ('3관');
COMMIT;

-- 1관 (THEATER_ID = 1) 좌석
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'A1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'A2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'A3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'A4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'A5');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'B1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'B2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'B3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'B4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'B5');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'C1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'C2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'C3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'C4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (1, 'C5');

-- 2관 (THEATER_ID = 2) 좌석
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'A1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'A2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'A3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'A4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'B1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'B2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'B3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'B4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'C1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (2, 'C2');

-- 3관 (THEATER_ID = 3) 좌석
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'D1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'D2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'D3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'D4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'D5');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'E1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'E2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'E3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'E4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'E5');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'F1');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'F2');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'F3');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'F4');
INSERT INTO SEATS (THEATER_ID, SEAT_NUMBER)
VALUES (3, 'F5');
COMMIT;

-- 2025-07-07 (오늘 날짜) 스케줄
-- 범죄도시4 (MOVIE_ID=1), 1관 (THEATER_ID=1)
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (1, 1, TO_DATE('2025-07-07', 'YYYY-MM-DD'), '10:00', 15);
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (1, 1, TO_DATE('2025-07-07', 'YYYY-MM-DD'), '12:30', 15);
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (1, 1, TO_DATE('2025-07-07', 'YYYY-MM-DD'), '15:00', 15);

-- 인사이드 아웃 2 (MOVIE_ID=2), 2관 (THEATER_ID=2)
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (2, 2, TO_DATE('2025-07-07', 'YYYY-MM-DD'), '11:00', 10);
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (2, 2, TO_DATE('2025-07-07', 'YYYY-MM-DD'), '13:30', 10);

-- 퓨리오사: 매드맥스 사가 (MOVIE_ID=3), 3관 (THEATER_ID=3)
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (3, 3, TO_DATE('2025-07-07', 'YYYY-MM-DD'), '14:00', 15);

-- 2025-07-08 (내일 날짜) 스케줄
-- 범죄도시4 (MOVIE_ID=1), 2관 (THEATER_ID=2)
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (1, 2, TO_DATE('2025-07-08', 'YYYY-MM-DD'), '10:00', 10);
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (1, 2, TO_DATE('2025-07-08', 'YYYY-MM-DD'), '12:30', 10);

-- 인사이드 아웃 2 (MOVIE_ID=2), 1관 (THEATER_ID=1)
INSERT INTO SCHEDULES (MOVIE_ID, THEATER_ID, DATE_OF_SCHEDULE, START_TIME, AVAILABLE_SEATS)
VALUES (2, 1, TO_DATE('2025-07-08', 'YYYY-MM-DD'), '11:00', 15);
COMMIT;

-- 예시: 1번 스케줄 (범죄도시4, 1관, 2025-07-07 10:00)의 A1, A2 좌석을 예약됨으로 표시
-- (SCHEDULE_ID=1, SEAT_ID=1 (1관 A1), SEAT_ID=2 (1관 A2)라고 가정)
INSERT INTO RESERVATIONS (MOVIE_ID, SCHEDULE_ID, SEAT_ID, RESERVATION_DATE, TOTAL_AMOUNT)
VALUES (1, 1, 1, TO_DATE('2025-07-07', 'YYYY-MM-DD'), 10000.00);

INSERT INTO RESERVATIONS (MOVIE_ID, SCHEDULE_ID, SEAT_ID, RESERVATION_DATE, TOTAL_AMOUNT)
VALUES (1, 1, 2, TO_DATE('2025-07-07', 'YYYY-MM-DD'), 10000.00);

-- 예시: 5번 스케줄 (인사이드 아웃 2, 2관, 2025-07-07 13:30)의 B3 좌석을 예약됨으로 표시
-- (SCHEDULE_ID=5, SEAT_ID=8 (2관 B3)라고 가정)
INSERT INTO RESERVATIONS (MOVIE_ID, SCHEDULE_ID, SEAT_ID, RESERVATION_DATE, TOTAL_AMOUNT)
VALUES (2, 5, 8, TO_DATE('2025-07-07', 'YYYY-MM-DD'), 10000.00);
COMMIT;

select *
from RESERVATION_seats;

CREATE TABLE RESERVATION_SEATS
(
    RESERVATION_SEAT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    RESERVATION_ID      NUMBER                            NOT NULL,
    SEAT_ID             NUMBER                            NOT NULL,
    STATUS              VARCHAR2(20) DEFAULT 'PENDING'    NOT NULL,  -- 'PENDING', 'RESERVED', 'CANCELLED' 등
    CREATED_AT          TIMESTAMP    DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_AT          TIMESTAMP    DEFAULT SYSTIMESTAMP NOT NULL,

    CONSTRAINT FK_RES_SEAT_RESERVATION FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATIONS (RESERVATION_ID),
    CONSTRAINT FK_RES_SEAT_SEAT FOREIGN KEY (SEAT_ID) REFERENCES SEATS (SEAT_ID),
    CONSTRAINT UQ_RES_SEAT_SCHEDULE UNIQUE (RESERVATION_ID, SEAT_ID) -- 한 예약에 동일 좌석 중복 방지
);

COMMENT ON TABLE RESERVATION_SEATS IS '각 예약에 할당된 개별 좌석 정보';
COMMENT ON COLUMN RESERVATION_SEATS.RESERVATION_SEAT_ID IS '예약된 좌석 고유 ID (기본 키)';
COMMENT ON COLUMN RESERVATION_SEATS.RESERVATION_ID IS '예약 테이블 (RESERVATIONS)의 외래 키';
COMMENT ON COLUMN RESERVATION_SEATS.SEAT_ID IS '좌석 테이블 (SEATS)의 외래 키';
COMMENT ON COLUMN RESERVATION_SEATS.STATUS IS '좌석 예약 상태 (예: PENDING, RESERVED, CANCELLED)';
COMMENT ON COLUMN RESERVATION_SEATS.CREATED_AT IS '레코드 생성 시점';
COMMENT ON COLUMN RESERVATION_SEATS.UPDATED_AT IS '레코드 마지막 업데이트 시점';

DROP TRIGGER RESERVATIONS_TRG;
DROP TABLE RESERVATIONS CASCADE CONSTRAINTS;

-- 기존 RESERVED_SEATS 테이블 삭제 (데이터가 있다면 백업 후 진행)
DROP TABLE RESERVED_SEATS CASCADE CONSTRAINTS;

-- 기존 RESERVATIONS_SEQ 시퀀스 삭제 (필요 시 재생성)
DROP SEQUENCE RESERVATIONS_SEQ;

-- (선택 사항) RESERVED_SEATS_SEQ (기존에 있었다면) 삭제
-- DROP SEQUENCE RESERVED_SEATS_SEQ;

-- 새로운 RESERVATIONS_SEQ 시퀀스 생성
CREATE SEQUENCE RESERVATIONS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE TABLE RESERVATIONS
(
    RESERVATION_ID   NUMBER PRIMARY KEY,
    -- MOVIE_ID는 SCHEDULE_ID를 통해 알 수 있으므로 직접 저장할 필요는 없지만, 편의상 유지
    MOVIE_ID         NUMBER        NOT NULL,
    SCHEDULE_ID      NUMBER        NOT NULL,
    RESERVATION_DATE DATE          NOT NULL,
    TOTAL_AMOUNT     NUMBER(10, 2) NOT NULL,
    RESERVATION_TIME TIMESTAMP DEFAULT SYSTIMESTAMP,
    FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES (MOVIE_ID),
    FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES (SCHEDULE_ID)
    -- UNIQUE (SCHEDULE_ID, SEAT_ID) 제약조건은 이제 필요 없음
);

-- RESERVATIONS 테이블에 대한 트리거 재정의
CREATE OR REPLACE TRIGGER RESERVATIONS_TRG
    BEFORE INSERT
    ON RESERVATIONS
    FOR EACH ROW
BEGIN
    SELECT RESERVATIONS_SEQ.NEXTVAL INTO :NEW.RESERVATION_ID FROM DUAL;
END;
/

-- RESERVATION_SEATS 시퀀스 생성 (기존 RESERVED_SEATS_SEQ와는 별개)
CREATE SEQUENCE RESERVATION_SEATS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;
drop table RESERVATION_SEATS;

-- RESERVATION_SEATS 테이블 생성 (SCHEDULE_ID 컬럼 제거, STATUS 컬럼 추가)
CREATE TABLE RESERVATION_SEATS
(
    RESERVATION_SEAT_ID NUMBER PRIMARY KEY, -- GENERATED BY DEFAULT ON NULL AS IDENTITY 대신 시퀀스+트리거 사용
    RESERVATION_ID      NUMBER       NOT NULL,
    SEAT_ID             NUMBER       NOT NULL,
    STATUS              VARCHAR2(20) DEFAULT 'PENDING' NOT NULL, -- 'PENDING', 'RESERVED', 'CANCELLED'
    CREATED_AT          TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_AT          TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

    CONSTRAINT FK_RES_SEAT_RESERVATION FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATIONS (RESERVATION_ID),
    CONSTRAINT FK_RES_SEAT_SEAT FOREIGN KEY (SEAT_ID) REFERENCES SEATS (SEAT_ID),
    CONSTRAINT UQ_RES_SEAT_RESERVATION UNIQUE (RESERVATION_ID, SEAT_ID) -- 한 예약에 동일 좌석 중복 방지
);

-- RESERVATION_SEATS 테이블에 대한 트리거 생성
CREATE OR REPLACE TRIGGER RESERVATION_SEATS_TRG
    BEFORE INSERT
    ON RESERVATION_SEATS
    FOR EACH ROW
BEGIN
    SELECT RESERVATION_SEATS_SEQ.NEXTVAL INTO :NEW.RESERVATION_SEAT_ID FROM DUAL;
END;
/

-- 기존 데이터들은 다시 삽입하거나 조정해야 합니다.
-- 예를 들어, SCHEDULES에 AVAILABLE_SEATS가 있는 경우 초기값을 다시 설정하세요.
-- 기존 INSERT 문은 대부분 그대로 사용할 수 있습니다.

-- **RESERVATIONS 테이블 INSERT 예시 (SEAT_ID 제거 후)**
-- 이 부분은 애플리케이션에서 처리됩니다.
-- INSERT INTO RESERVATIONS (MOVIE_ID, SCHEDULE_ID, RESERVATION_DATE, TOTAL_AMOUNT)
-- VALUES (1, 101, TO_DATE('2025-07-07', 'YYYY-MM-DD'), 30000.00);

-- **RESERVATION_SEATS 테이블 INSERT 예시**
-- 이 부분은 애플리케이션에서 처리됩니다.
-- INSERT INTO RESERVATION_SEATS (RESERVATION_ID, SEAT_ID, STATUS)
-- VALUES (1, (SELECT SEAT_ID FROM SEATS WHERE SEAT_NUMBER = 'A1' AND THEATER_ID = 1), 'PENDING');
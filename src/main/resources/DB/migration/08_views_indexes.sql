-- ========================================
-- 8. 뷰(Views) 및 인덱스(Indexes) 생성
-- ========================================

-- ========================================
-- 뷰 생성
-- ========================================

-- 1. 상영시간 정보 뷰 (조인 결과를 뷰로 생성)
CREATE OR REPLACE VIEW V_SHOWTIME_LIST AS
SELECT
    r.RUNTIME_ID,
    r.MOVIE_ID,
    r.ROOM_ID,
    m.TITLE as MOVIE_TITLE,
    m.GENRE as MOVIE_GENRE,
    m.RATING as MOVIE_RATING,
    m.RUNNING_TIME,
    m.POSTER_URL,
    rm.ROOM_NAME,
    rm.TOTAL_SEATS,
    r.RUN_DATE,
    r.START_TIME,
    r.PRICE,
    r.AVAILABLE_SEATS,
    CASE
        WHEN r.AVAILABLE_SEATS = 0 THEN 'Y'
        ELSE 'N'
        END as IS_SOLD_OUT
FROM RUNTIMES r
         JOIN MOVIES m ON r.MOVIE_ID = m.MOVIE_ID
         JOIN ROOMS rm ON r.ROOM_ID = rm.ROOM_ID
WHERE r.RUN_DATE >= TRUNC(SYSDATE);

-- 2. 예약 상세 정보 뷰
CREATE OR REPLACE VIEW V_RESERVATION_DETAIL AS
SELECT
    res.RESERVATION_ID,
    res.U_ID,
    u.U_nickname AS USER_NICKNAME,
    u.U_name AS USER_NAME,
    res.RUNTIME_ID,
    m.TITLE AS MOVIE_TITLE,
    rm.ROOM_NAME,
    rt.RUN_DATE,
    rt.START_TIME,
    res.ADULT,
    res.YOUTH,
    res.CHILD,
    (res.ADULT + res.YOUTH + res.CHILD) as TOTAL_PEOPLE,
    LISTAGG(s.SEAT_ROW || s.SEAT_NUMBER, ', ')
        WITHIN GROUP (ORDER BY s.SEAT_ROW, s.SEAT_NUMBER) AS SEATS,
    res.TOTAL_AMOUNT,
    res.RESERVATION_STATUS,
    res.RESERVED_AT
FROM RESERVATIONS res
    JOIN USERS u ON res.U_ID = u.U_ID
    JOIN RUNTIMES rt ON res.RUNTIME_ID = rt.RUNTIME_ID
    JOIN MOVIES m ON rt.MOVIE_ID = m.MOVIE_ID
    JOIN ROOMS rm ON rt.ROOM_ID = rm.ROOM_ID
    LEFT JOIN RESERVATION_SEATS rs ON res.RESERVATION_ID = rs.RESERVATION_ID
    LEFT JOIN SEATS s ON rs.SEAT_ID = s.SEAT_ID
GROUP BY res.RESERVATION_ID, res.U_ID, u.U_nickname, u.U_name, res.RUNTIME_ID,
    m.TITLE, rm.ROOM_NAME, rt.RUN_DATE, rt.START_TIME,
    res.ADULT, res.YOUTH, res.CHILD, res.TOTAL_AMOUNT,
    res.RESERVATION_STATUS, res.RESERVED_AT;

-- 3. 영화별 매출 통계 뷰
CREATE OR REPLACE VIEW V_MOVIE_SALES_STATS AS
SELECT
    m.MOVIE_ID,
    m.TITLE,
    m.GENRE,
    m.RATING,
    COUNT(DISTINCT rt.RUNTIME_ID) as TOTAL_SHOWTIMES,
    COUNT(res.RESERVATION_ID) as TOTAL_RESERVATIONS,
    SUM(CASE WHEN res.RESERVATION_STATUS = '예약완료' THEN res.ADULT + res.YOUTH + res.CHILD ELSE 0 END) as TOTAL_AUDIENCE,
    SUM(CASE WHEN res.RESERVATION_STATUS = '예약완료' THEN res.TOTAL_AMOUNT ELSE 0 END) as TOTAL_REVENUE,
    ROUND(AVG(CASE WHEN res.RESERVATION_STATUS = '예약완료' THEN res.TOTAL_AMOUNT ELSE NULL END), 2) as AVG_TICKET_PRICE
FROM MOVIES m
         LEFT JOIN RUNTIMES rt ON m.MOVIE_ID = rt.MOVIE_ID
         LEFT JOIN RESERVATIONS res ON rt.RUNTIME_ID = res.RUNTIME_ID
GROUP BY m.MOVIE_ID, m.TITLE, m.GENRE, m.RATING;

-- 4. 상영관별 이용률 뷰
CREATE OR REPLACE VIEW V_ROOM_UTILIZATION AS
SELECT
    rm.ROOM_ID,
    rm.ROOM_NAME,
    rm.TOTAL_SEATS,
    COUNT(rt.RUNTIME_ID) as TOTAL_SHOWTIMES,
    SUM(rm.TOTAL_SEATS - rt.AVAILABLE_SEATS) as TOTAL_SOLD_SEATS,
    SUM(rt.AVAILABLE_SEATS) as TOTAL_AVAILABLE_SEATS,
    ROUND((SUM(rm.TOTAL_SEATS - rt.AVAILABLE_SEATS) / SUM(rm.TOTAL_SEATS)) * 100, 2) as UTILIZATION_RATE
FROM ROOMS rm
         LEFT JOIN RUNTIMES rt ON rm.ROOM_ID = rt.ROOM_ID
GROUP BY rm.ROOM_ID, rm.ROOM_NAME, rm.TOTAL_SEATS;

-- 5. 일별 매출 통계 뷰
CREATE OR REPLACE VIEW V_DAILY_SALES AS
SELECT
    rt.RUN_DATE,
    COUNT(res.RESERVATION_ID) as TOTAL_RESERVATIONS,
    SUM(CASE WHEN res.RESERVATION_STATUS = '예약완료' THEN res.ADULT + res.YOUTH + res.CHILD ELSE 0 END) as TOTAL_AUDIENCE,
    SUM(CASE WHEN res.RESERVATION_STATUS = '예약완료' THEN res.TOTAL_AMOUNT ELSE 0 END) as TOTAL_REVENUE,
    COUNT(DISTINCT rt.MOVIE_ID) as MOVIES_SHOWN
FROM RUNTIMES rt
         LEFT JOIN RESERVATIONS res ON rt.RUNTIME_ID = res.RUNTIME_ID
GROUP BY rt.RUN_DATE
ORDER BY rt.RUN_DATE;

-- ========================================
-- 인덱스 생성 (성능 최적화)
-- ========================================

-- 1. RUNTIMES 테이블 인덱스
CREATE INDEX IDX_RUNTIMES_DATE ON RUNTIMES(RUN_DATE);
CREATE INDEX IDX_RUNTIMES_MOVIE_DATE ON RUNTIMES(MOVIE_ID, RUN_DATE);
CREATE INDEX IDX_RUNTIMES_ROOM_DATE ON RUNTIMES(ROOM_ID, RUN_DATE);

-- 2. RESERVATIONS 테이블 인덱스
CREATE INDEX IDX_RESERVATIONS_USER ON RESERVATIONS(U_ID);
CREATE INDEX IDX_RESERVATIONS_RUNTIME ON RESERVATIONS(RUNTIME_ID);
CREATE INDEX IDX_RESERVATIONS_STATUS ON RESERVATIONS(RESERVATION_STATUS);
CREATE INDEX IDX_RESERVATIONS_DATE ON RESERVATIONS(RESERVED_AT);

-- 3. RESERVATION_SEATS 테이블 인덱스
CREATE INDEX IDX_RES_SEATS_RESERVATION ON RESERVATION_SEATS(RESERVATION_ID);
CREATE INDEX IDX_RES_SEATS_SEAT ON RESERVATION_SEATS(SEAT_ID);

-- 4. SEATS 테이블 인덱스
CREATE INDEX IDX_SEATS_ROOM ON SEATS(ROOM_ID);
CREATE INDEX IDX_SEATS_ROW_NUMBER ON SEATS(ROOM_ID, SEAT_ROW, SEAT_NUMBER);

-- 5. 복합 인덱스 (자주 함께 사용되는 컬럼들)
CREATE INDEX IDX_RUNTIME_MOVIE_DATE_TIME ON RUNTIMES(MOVIE_ID, RUN_DATE, START_TIME);
CREATE INDEX IDX_RESERVATION_USER_STATUS ON RESERVATIONS(U_ID, RESERVATION_STATUS);

-- ========================================
-- 확인 쿼리
-- ========================================

-- 뷰 동작 확인
SELECT '뷰 테스트: V_SHOWTIME_LIST' as TEST_NAME FROM DUAL;
SELECT * FROM V_SHOWTIME_LIST WHERE ROWNUM <= 5;

SELECT '뷰 테스트: V_RESERVATION_DETAIL' as TEST_NAME FROM DUAL;
SELECT * FROM V_RESERVATION_DETAIL WHERE ROWNUM <= 3;

SELECT '뷰 테스트: V_MOVIE_SALES_STATS' as TEST_NAME FROM DUAL;
SELECT * FROM V_MOVIE_SALES_STATS ORDER BY TOTAL_REVENUE DESC;

SELECT '뷰 테스트: V_ROOM_UTILIZATION' as TEST_NAME FROM DUAL;
SELECT * FROM V_ROOM_UTILIZATION ORDER BY UTILIZATION_RATE DESC;

SELECT '뷰 테스트: V_DAILY_SALES' as TEST_NAME FROM DUAL;
SELECT * FROM V_DAILY_SALES WHERE ROWNUM <= 7;

-- 인덱스 확인
SELECT
    INDEX_NAME,
    TABLE_NAME,
    COLUMN_NAME,
    COLUMN_POSITION
FROM USER_IND_COLUMNS
WHERE TABLE_NAME IN ('RUNTIMES', 'RESERVATIONS', 'RESERVATION_SEATS', 'SEATS')
ORDER BY TABLE_NAME, INDEX_NAME, COLUMN_POSITION;

-- 커밋
COMMIT;